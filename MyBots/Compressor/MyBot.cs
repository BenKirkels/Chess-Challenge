using ChessChallenge.API;
using System;
using System.Collections.Generic;
using System.Linq;

// Compressor
public class MyBot : IChessBot
{
    /* readonly sbyte[] pawnsEarly = new sbyte[]
    {
     0, 0,  0,  0,  0,  0, 0, 0,
     5,10, 10,-20,-20, 10,10, 5,
     5,-5,-10,  0,  0,-10,-5, 5,
     0, 0,  0, 20, 20,  0, 0, 0,
     5, 5, 10, 25, 25, 10, 5, 5,
    10,10, 20, 30, 30, 20,10,10,
    50,50, 50, 50, 50, 50,50,50,
     0, 0,  0,  0,  0,  0, 0, 0
    };
    readonly sbyte[] pawnLate = new sbyte[]
    {
     0, 0, 0, 0, 0, 0, 0, 0,
    10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,
    20,20,20,20,20,20,20,20,
    30,30,30,30,30,30,30,30,
    50,50,50,50,50,50,50,50,
    80,80,80,80,80,80,80,80,
     0, 0, 0, 0, 0, 0, 0, 0
    };
    readonly sbyte[] knights = new sbyte[]
    {
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50
    };
    readonly sbyte[] bishops = new sbyte[]
    {
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  0, 10, 10, 10, 10,  0,-10,
    -10,  5,  5, 10, 10,  5,  5,-10,
    -10,  0,  5, 10, 10,  5,  0,-10,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -20,-10,-10,-10,-10,-10,-10,-20
    };
    readonly sbyte[] rooks = new sbyte[]
    {
     0,  0,  0,  5,  5,  0,  0,  0,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
     5, 10, 10, 10, 10, 10, 10,  5,
     0,  0,  0,  0,  0,  0,  0,  0
    };
    readonly sbyte[] queens = new sbyte[]
    {
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5,  5,  5,  5,  0,-10,
     -5,  0,  5,  5,  5,  5,  0, -5,
     -5,  0,  5,  5,  5,  5,  0, -5,
    -10,  0,  5,  5,  5,  5,  0,-10,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20
    };
    readonly sbyte[] kingsEarly = new sbyte[]
    {
     20, 30, 10,  0,  0, 10, 30, 20,
     20, 20,  0,  0,  0,  0, 20, 20,
    -10,-20,-20,-20,-20,-20,-20,-10,
    -20,-30,-30,-40,-40,-30,-30,-20,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30
    };
    readonly sbyte[] kingsLate = new sbyte[]
    {
    -50,-30,-30,-30,-30,-30,-30,-50,
    -30,-30,  0,  0,  0,  0,-30,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-20,-10,  0,  0,-10,-20,-30,
    -50,-40,-30,-20,-20,-30,-40,-50
    };
    void Compress()
    {
        List<sbyte[]> evaluationBoards = new();
        evaluationBoards.Add(kingsLate);
        evaluationBoards.Add(kingsEarly);
        evaluationBoards.Add(queens);
        evaluationBoards.Add(rooks);
        evaluationBoards.Add(bishops);
        evaluationBoards.Add(knights);
        evaluationBoards.Add(pawnsEarly);
        evaluationBoards.Add(pawnLate);

        ulong[] compressedEvaluationBoard = new ulong[64];
        ulong CompressedValue;
        foreach (sbyte[] evaluationBoard in evaluationBoards)
        {
            for (int i = 0; i < evaluationBoard.Length; i++)
            {
                CompressedValue = compressedEvaluationBoard[i];
                CompressedValue = CompressedValue << 8 | (ulong)(byte)evaluationBoard[i];
                compressedEvaluationBoard[i] = CompressedValue;
            }
        }
        Console.WriteLine("Compressed evaluation board: " + string.Join(", ", compressedEvaluationBoard));
    }
    ulong[] Compressed = new ulong[]
    {
14849753360064446464, 16293730985874817024, 16288101486341259264, 16285292255607128064, 16285292255607128064, 16288101486341259264, 16293730985874817024, 14849753360064446464, 16290917314144503050, 16290645752205281802, 2570, 388106, 388106, 2570, 16290645752205281802, 16290917314144503050, 16354530658881766666, 17792596228002151178, 1507585472988902922, 2228161413368446986, 2228161413368446986, 1507585472988902922, 17792596228002151178, 16354530658881766666, 16351721406672797716, 17789781478066880532, 2225346663601340436, 2943107854213846036, 2943107854213846036, 2225346663601340436, 17789781478066880532, 16351721406672797716, 16348906656905692446, 17786966728383989022, 2222531913750350366, 2940293104446740766, 2940293104446740766, 2222531913750350366, 17786966728383989022, 16348906656905692446, 16348901159347554866, 17786966728299776562, 1501955973370745906, 2219717164067135026, 2219717164067135026, 1501955973370745906, 17786966728299776562, 16348901159347554866, 16348900102784954960, 17066390830885646928, 17786966771249459792, 57983888152080976, 57983888152080976, 17786966771249459792, 17066390830885646928, 16348900102784954960, 14907737205266841600, 15625509391163719680, 16346085331543654400, 17063852019713966080, 17063852019713966080, 16346085331543654400, 15625509391163719680, 14907737205266841600};
    void Rewrite(ulong[] array)
    {
        string[] result = new string[array.Length];
        for (int i = 0; i < array.Length; i++)
        {
            result[i] = "0x" + array[i].ToString("X");
        }
        Console.WriteLine("Compressed evaluation board: " + string.Join(", ", result));
    }
    private enum ScoreType { PawnLate, Pawn, Knight, Bishop, Rook, Queen, King, KingLate };
    int GetValue(ScoreType type, int index)
    {
        ulong CompressedValue = Compressed[index];
        ulong Mask = 0xFF;
        return (int)(sbyte)((CompressedValue >> (int)type * 8) & Mask);
    }
    public Move Think(Board board, Timer timer)
    {
        //Compress();

        //Rewrite(Compressed);

        List<sbyte[]> evaluationBoards = new();
        evaluationBoards.Add(kingsLate);
        evaluationBoards.Add(kingsEarly);
        evaluationBoards.Add(queens);
        evaluationBoards.Add(rooks);
        evaluationBoards.Add(bishops);
        evaluationBoards.Add(knights);
        evaluationBoards.Add(pawnsEarly);
        evaluationBoards.Add(pawnLate);
        for (int i = 0; i <= 7; i++)
        {
            sbyte[] evaluationBoard = evaluationBoards[i];
            for (int j = 0; j < evaluationBoard.Length; j++)
            {
                if (evaluationBoard[j] != GetValue((ScoreType)(7 - i), j))
                    Console.WriteLine($"ScoreType: {7 - i}, Index: {j}, Expected: {evaluationBoard[j]}, Actual: {GetValue((ScoreType)(7 - i), j)} !!!");
                else
                    Console.WriteLine($"ScoreType: {7 - i}, Index: {j}, Expected: {evaluationBoard[j]}, Actual: {GetValue((ScoreType)(7 - i), j)}");
            }
        }
        return board.GetLegalMoves()[0];
    } */


    int[] mg_pawn_table = {
      0,   0,   0,   0,   0,   0,  0,   0,
     98, 134,  61,  95,  68, 126, 34, -11,
     -6,   7,  26,  31,  65,  56, 25, -20,
    -14,  13,   6,  21,  23,  12, 17, -23,
    -27,  -2,  -5,  12,  17,   6, 10, -25,
    -26,  -4,  -4, -10,   3,   3, 33, -12,
    -35,  -1, -20, -23, -15,  24, 38, -22,
      0,   0,   0,   0,   0,   0,  0,   0,
};

    int[] eg_pawn_table = {
      0,   0,   0,   0,   0,   0,   0,   0,
    178, 173, 158, 134, 147, 132, 165, 187,
     94, 100,  85,  67,  56,  53,  82,  84,
     32,  24,  13,   5,  -2,   4,  17,  17,
     13,   9,  -3,  -7,  -7,  -8,   3,  -1,
      4,   7,  -6,   1,   0,  -5,  -1,  -8,
     13,   8,   8,  10,  13,   0,   2,  -7,
      0,   0,   0,   0,   0,   0,   0,   0,
};

    int[] mg_knight_table = {
    -167, -89, -34, -49,  61, -97, -15, -107,
     -73, -41,  72,  36,  23,  62,   7,  -17,
     -47,  60,  37,  65,  84, 129,  73,   44,
      -9,  17,  19,  53,  37,  69,  18,   22,
     -13,   4,  16,  13,  28,  19,  21,   -8,
     -23,  -9,  12,  10,  19,  17,  25,  -16,
     -29, -53, -12,  -3,  -1,  18, -14,  -19,
    -105, -21, -58, -33, -17, -28, -19,  -23,
};

    int[] eg_knight_table = {
    -58, -38, -13, -28, -31, -27, -63, -99,
    -25,  -8, -25,  -2,  -9, -25, -24, -52,
    -24, -20,  10,   9,  -1,  -9, -19, -41,
    -17,   3,  22,  22,  22,  11,   8, -18,
    -18,  -6,  16,  25,  16,  17,   4, -18,
    -23,  -3,  -1,  15,  10,  -3, -20, -22,
    -42, -20, -10,  -5,  -2, -20, -23, -44,
    -29, -51, -23, -15, -22, -18, -50, -64,
};

    int[] mg_bishop_table = {
    -29,   4, -82, -37, -25, -42,   7,  -8,
    -26,  16, -18, -13,  30,  59,  18, -47,
    -16,  37,  43,  40,  35,  50,  37,  -2,
     -4,   5,  19,  50,  37,  37,   7,  -2,
     -6,  13,  13,  26,  34,  12,  10,   4,
      0,  15,  15,  15,  14,  27,  18,  10,
      4,  15,  16,   0,   7,  21,  33,   1,
    -33,  -3, -14, -21, -13, -12, -39, -21,
};

    int[] eg_bishop_table = {
    -14, -21, -11,  -8, -7,  -9, -17, -24,
     -8,  -4,   7, -12, -3, -13,  -4, -14,
      2,  -8,   0,  -1, -2,   6,   0,   4,
     -3,   9,  12,   9, 14,  10,   3,   2,
     -6,   3,  13,  19,  7,  10,  -3,  -9,
    -12,  -3,   8,  10, 13,   3,  -7, -15,
    -14, -18,  -7,  -1,  4,  -9, -15, -27,
    -23,  -9, -23,  -5, -9, -16,  -5, -17,
};

    int[] mg_rook_table = {
     32,  42,  32,  51, 63,  9,  31,  43,
     27,  32,  58,  62, 80, 67,  26,  44,
     -5,  19,  26,  36, 17, 45,  61,  16,
    -24, -11,   7,  26, 24, 35,  -8, -20,
    -36, -26, -12,  -1,  9, -7,   6, -23,
    -45, -25, -16, -17,  3,  0,  -5, -33,
    -44, -16, -20,  -9, -1, 11,  -6, -71,
    -19, -13,   1,  17, 16,  7, -37, -26,
};

    int[] eg_rook_table = {
    13, 10, 18, 15, 12,  12,   8,   5,
    11, 13, 13, 11, -3,   3,   8,   3,
     7,  7,  7,  5,  4,  -3,  -5,  -3,
     4,  3, 13,  1,  2,   1,  -1,   2,
     3,  5,  8,  4, -5,  -6,  -8, -11,
    -4,  0, -5, -1, -7, -12,  -8, -16,
    -6, -6,  0,  2, -9,  -9, -11,  -3,
    -9,  2,  3, -1, -5, -13,   4, -20,
};

    int[] mg_queen_table = {
    -28,   0,  29,  12,  59,  44,  43,  45,
    -24, -39,  -5,   1, -16,  57,  28,  54,
    -13, -17,   7,   8,  29,  56,  47,  57,
    -27, -27, -16, -16,  -1,  17,  -2,   1,
     -9, -26,  -9, -10,  -2,  -4,   3,  -3,
    -14,   2, -11,  -2,  -5,   2,  14,   5,
    -35,  -8,  11,   2,   8,  15,  -3,   1,
     -1, -18,  -9,  10, -15, -25, -31, -50,
};

    int[] eg_queen_table = {
     -9,  22,  22,  27,  27,  19,  10,  20,
    -17,  20,  32,  41,  58,  25,  30,   0,
    -20,   6,   9,  49,  47,  35,  19,   9,
      3,  22,  24,  45,  57,  40,  57,  36,
    -18,  28,  19,  47,  31,  34,  39,  23,
    -16, -27,  15,   6,   9,  17,  10,   5,
    -22, -23, -30, -16, -16, -23, -36, -32,
    -33, -28, -22, -43,  -5, -32, -20, -41,
};

    int[] mg_king_table = {
    -65,  23,  16, -15, -56, -34,   2,  13,
     29,  -1, -20,  -7,  -8,  -4, -38, -29,
     -9,  24,   2, -16, -20,   6,  22, -22,
    -17, -20, -12, -27, -30, -25, -14, -36,
    -49,  -1, -27, -39, -46, -44, -33, -51,
    -14, -14, -22, -46, -44, -30, -15, -27,
      1,   7,  -8, -64, -43, -16,   9,   8,
    -15,  36,  12, -54,   8, -28,  24,  14,
};

    int[] eg_king_table = {
    -74, -35, -18, -18, -11,  15,   4, -17,
    -12,  17,  14,  17,  17,  38,  23,  11,
     10,  17,  23,  15,  20,  45,  44,  13,
     -8,  22,  24,  27,  26,  33,  26,   3,
    -18,  -4,  21,  24,  27,  23,   9, -11,
    -19,  -3,  11,  21,  23,  16,   7,  -9,
    -27, -11,   4,  13,  14,   4,  -5, -17,
    -53, -34, -21, -11, -28, -14, -24, -43
};

    ulong[] compressed = new ulong[8 * 12];
    void Compress()
    {
        List<int[]> tables = new();
        tables.Add(mg_pawn_table);
        tables.Add(eg_pawn_table);
        tables.Add(mg_knight_table);
        tables.Add(eg_knight_table);
        tables.Add(mg_bishop_table);
        tables.Add(eg_bishop_table);
        tables.Add(mg_rook_table);
        tables.Add(eg_rook_table);
        tables.Add(mg_queen_table);
        tables.Add(eg_queen_table);
        tables.Add(mg_king_table);
        tables.Add(eg_king_table);

        for (int i = 0; i < 12 * 64; i++)
        {
            compressed[i / 8] += (ulong)(tables[i / 64][i % 64] / 2) << 8 * (i % 8);
        }
        Console.WriteLine(string.Join(", ", compressed));

    }

    ulong[] result = { 0, 18091310594175943473, 17729576757067842301, 17656368983588406777, 17583463653133123315, 18018903212831931891, 17659471727739404271, 0, 0, 6724510076046890585, 3037988131755930159, 578714746879347728, 277063994901510, 18158511498534388482, 18230852792426431494, 0, 14625668616749503405, 17871161878745705436, 1595470717666860521, 795204270349158396, 18161338403160326650, 17873669855958662133, 17796265298118698482, 17651561836709082572, 14907181883262102755, 16569855717665930228, 17003054520181519860, 17799357172263092472, 17798797507976232183, 17651294711605886709, 16858369780686190059, 16133854247110633202, 18159334980899504626, 16791984635788068851, 18379780590394479096, 18375550773540487678, 145529233262118397, 362835568813868800, 4514607629076226, 17720813485764968176, 17579796734441879033, 17941771364025433596, 144118482315770881, 72344596705051647, 18158237733175558397, 17941497615879503610, 17508020636922738425, 17869711558145539061, 1517436131058128144, 1588962699736059917, 584929225523136766, 17725060976879008500, 17654951682867065582, 17293259623309505514, 15923889354942314474, 17504932134664534519, 145247710940300550, 73184589245711877, 18374122438830260995, 72057598333288706, 18085326896522068481, 17869150811544485886, 18373274689578466557, 17726724477624058108, 1591202357256781810, 1949526440663706868, 2024117404048750586, 18446471394691117811, 18374965751245959932, 146086603817419001, 18446470312511208431, 16641068873990010624, 721993266920884988, 4235443680840184, 290782441826943734, 1304940102892129025, 798000315483360759, 145531376283087608, 17288743890399065333, 17002759842054861296, 432608227130608352, 17432587516366946318, 17657210019487222780, 17147723797407331832, 16640776334774304744, 17508008438829218041, 289347389234086656, 507765481550516729, 17870853946314518235, 363405120148801530, 438562246038849541, 75734416974678780, 18087594154091216375, 18159366965993733879, 17869722600641526515, 16930149142397054694 };
    int GetPieceSquareValue(int index)
    {
        return (int)(sbyte)((result[index / 8] >> (8 * (index % 8))) & 255) * 2;
    }

    ulong[] psts = { 657614902731556116, 420894446315227099, 384592972471695068, 312245244820264086, 364876803783607569, 366006824779723922, 366006826859316500, 786039115310605588, 421220596516513823, 366011295806342421,
                         366006826859316436, 366006896669578452, 162218943720801556, 440575073001255824, 657087419459913430, 402634039558223453, 347425219986941203, 365698755348489557, 311382605788951956, 147850316371514514,
                         329107007234708689, 402598430990222677, 402611905376114006, 329415149680141460, 257053881053295759, 291134268204721362, 492947507967247313, 367159395376767958, 384021229732455700, 384307098409076181,
                         402035762391246293, 328847661003244824, 365712019230110867, 366002427738801364, 384307168185238804, 347996828560606484, 329692156834174227, 365439338182165780, 386018218798040211, 456959123538409047,
                         347157285952386452, 365711880701965780, 365997890021704981, 221896035722130452, 384289231362147538, 384307167128540502, 366006826859320596, 366006826876093716, 366002360093332756, 366006824694793492,
                         347992428333053139, 457508666683233428, 329723156783776785, 329401687190893908, 366002356855326100, 366288301819245844, 329978030930875600, 420621693221156179, 422042614449657239, 384602117564867863,
                         419505151144195476, 366274972473194070, 329406075454444949, 275354286769374224, 366855645423297932, 329991151972070674, 311105941360174354, 256772197720318995, 365993560693875923, 258219435335676691,
                         383730812414424149, 384601907111998612, 401758895947998613, 420612834953622999, 402607438610388375, 329978099633296596, 67159620133902 };

    public int getPstVal(int psq)
    {
        return (int)(((psts[psq / 10] >> (6 * (psq % 10))) & 63) - 20) * 8;
    }
    public Move Think(Board board, Timer times)
    {
        //Compress();
        for (int i = 0; i < 64; i++)
        {
            Console.WriteLine(getPstVal(i));
        }

        return board.GetLegalMoves()[0];
    }
}